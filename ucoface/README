1.- Generación de rutas
=======================

1.- Obtener a través de una REST-API una ruta desde el punto A al punto B. Utilizamos Here con posibilidad de consumo a través de
JavaScript, API-REST y SDKs Android/iOS. Hemos probado con REST y entre las cosas que nos interesa genera una ruta basada en los
waypoints. Hemos creado un script con la llamada con el que podemos redirigir el resultado al archivo "salido.json".

1.a: El archivo "getdata.sh" realiza diferentes llamadas de prueba a través de una consulta con CURL con una apiKey FREE para 
ejemplos. Hemos probado rendimiento y suele fallar esperemos que sea por el uso de la clave FREE. Nos devuelve un archivo .json con 
toda la descripción de la ruta.

1.b: El archivo "generageo.py", lee el archivo "salida.json" generado con las distintas pruebas del procedimiento del punto 1.a para 
generar un archivo .geojson que podemos representari/cargar en un servidor de mapas que interprete dichos archivos. En estos 
archivos .geojson tenemos los diferentes waypoint que describen la ruta en base a continuos "LineString". Esto nos sirve para probar 
las rutas, porque en las llamadas a la librería podemos incluir los "avoidareas" de prueba que son las esquinas (superior izquierda, 
inferior derecha) de un cuadrado. (pendiente de comprobar si es cuadrado/rectángulo)

1.c: Los archivos .geojson se interpretan desde github: https://github.com/jcheca/geomapas/tree/master/ucoface, así que es una buena 
opción para probar las rutas sin software adicional.

2.- Mapa de iluminancia
=======================

2.- Generar una APIREST de consulta de puntos GEO para conocer la iluminancia del punto. Partimos de un mapa de iluminiación y toma
de datos cada "x" metros, aún sin definir. Generaremos una BBDD y consultas basados en FiWare y protocolo NGSI/V2. La consulta 
será, del punto determinado (coords) con una distancia determinadai(maxDistance), que determine si encuentra registros dentro de 
dicha distancia determinada(maxDistance):

http://{{host}}:{{port}}/v2/entities?georel=near;maxDistance:100&geometry=point&coords=-4.715269804, 37.915044032

3.- Pendiente de estudio
========================

3.- Por cada LineString tendremos que dividir entre segmentos(maxDistance) la distancia total de cada segmento de ruta, sobre cada
punto consultar su posible iluminancia basada en el punto 2, si tenemos dicho dato, APLICAR FORMULA IMUS y si no cumple condiciones
establecidas generar en dicho punto una avoidarea y volver a empezar generando un bucle hasta que no tengamos "avoidareas" en la
ruta.

Necesitamos encontrar librerías para trabajar con GEOS Data para funciones como:

- Creación de los puntos de un BOX, para avoidareas para el punto determinado.
- Split de LineString
- Generación polígono con área delimitada donde funcione la aplicación y determinación de los puntos si están incluidos en dicho
polígono o no.

Ejemplo: https://turfjs.org/getting-started
